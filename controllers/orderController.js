const Order = require("../models/Order");
const db = require("../db"); // üî• TH√äM D√íNG N√ÄY ƒê·ªÇ IMPORT `db`

// L·∫•y danh s√°ch ƒë∆°n h√†ng
exports.getAllOrders = async (req, res) => {
    try {
        const orders = await Order.getAll();
        res.json(orders);
    } catch (error) {
        res.status(500).json({ error: "L·ªói l·∫•y danh s√°ch ƒë∆°n h√†ng!" });
    }
};

// L·∫•y chi ti·∫øt ƒë∆°n h√†ng
exports.getOrderById = async (req, res) => {
    try {
        const order = await Order.getById(req.params.id);
        if (!order) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!" });
        res.json(order);
    } catch (error) {
        res.status(500).json({ error: "L·ªói l·∫•y ƒë∆°n h√†ng!" });
    }
};

// T·∫°o ƒë∆°n h√†ng m·ªõi
exports.createOrder = async (req, res) => {
    try {
        const { customerID, shipping_address, responsible_person, items } = req.body;
        
        if (!customerID || !shipping_address || !responsible_person || !items || !items.length) {
            return res.status(400).json({ error: "Thi·∫øu th√¥ng tin ƒë∆°n h√†ng ho·∫∑c danh s√°ch s·∫£n ph·∫©m!" });
        }

        const orderId = await Order.create({ customerID, shipping_address, responsible_person, items });
        res.status(201).json({ message: "ƒê∆°n h√†ng ƒë√£ t·∫°o!", orderId });
    } catch (error) {
        res.status(500).json({ error: "L·ªói t·∫°o ƒë∆°n h√†ng!", details: error.message });
    }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
exports.updateOrderStatus = async (req, res) => {
    try {
        const { status } = req.body;
        const { id } = req.params;

        const success = await Order.updateStatus(id, status);
        if (!success) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!" });

        res.json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!" });
    } catch (error) {
        res.status(500).json({ error: "L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i!", details: error.message });
    }
};

// H·ªßy ƒë∆°n h√†ng (ch·ªâ ƒë·ªïi tr·∫°ng th√°i th√†nh "Canceled")
exports.cancelOrder = async (req, res) => {
    try {
        const { id } = req.params;
        const success = await Order.updateStatus(id, "Canceled"); // üî• KH√îNG X√ìA ƒê∆†N H√ÄNG
        if (!success) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!" });

        res.json({ message: "ƒê∆°n h√†ng ƒë√£ h·ªßy!" });
    } catch (error) {
        res.status(500).json({ error: "L·ªói h·ªßy ƒë∆°n h√†ng!", details: error.message });
    }
};

// X√ìA ƒê∆†N H√ÄNG (C·ªòNG L·∫†I KHO TR∆Ø·ªöC KHI X√ìA)
exports.deleteOrder = async (req, res) => {
  const orderId = req.params.id;
  const connection = await db.getConnection();

  try {
      await connection.beginTransaction();

      // L·∫•y danh s√°ch s·∫£n ph·∫©m trong `order_items`
      const [orderItems] = await connection.query(
          "SELECT productID, quantity FROM order_items WHERE order_id = ?",
          [orderId]
      );

      // C·ªông l·∫°i s·ªë l∆∞·ª£ng v√†o `products.stock` v√† `inventory.stock_level`, gi·∫£m `inventory.sold_quantity`
      for (const item of orderItems) {
          await connection.query(
              "UPDATE products SET stock = stock + ? WHERE productID = ?",
              [item.quantity, item.productID]
          );

          await connection.query(
              "UPDATE inventory SET stock_level = stock_level + ?, sold_quantity = sold_quantity - ? WHERE productID = ?",
              [item.quantity, item.quantity, item.productID]
          );
      }

      // X√≥a `order_items`
      await connection.query("DELETE FROM order_items WHERE order_id = ?", [orderId]);

      // X√≥a ƒë∆°n h√†ng
      const [result] = await connection.query("DELETE FROM orders WHERE id = ?", [orderId]);

      if (result.affectedRows === 0) {
          throw new Error("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!");
      }

      await connection.commit();
      res.json({ message: "ƒê∆°n h√†ng ƒë√£ b·ªã x√≥a v√† kho ƒë√£ c·∫≠p nh·∫≠t!" });

  } catch (error) {
      await connection.rollback();
      res.status(500).json({ error: "L·ªói x√≥a ƒë∆°n h√†ng!", details: error.message });
  } finally {
      connection.release();
  }
};

