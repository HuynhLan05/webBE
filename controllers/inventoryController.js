const Inventory = require("../models/Inventory");

//  L·∫•y to√†n b·ªô danh s√°ch kho h√†ng
exports.getAllInventory = async (req, res) => {
    try {
        const inventory = await Inventory.getAll();
        if (inventory.length === 0) {
            return res.status(204).send(); // Kh√¥ng c√≥ d·ªØ li·ªáu
        }
        res.json(inventory);
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch kho h√†ng:", error);
        res.status(500).json({ error: "L·ªói h·ªá th·ªëng khi l·∫•y kho h√†ng!" });
    }
};

//  L·∫•y th√¥ng tin kho h√†ng theo ID
exports.getInventoryById = async (req, res) => {
    try {
        const { id } = req.params;
        const inventory = await Inventory.getById(id);
        if (!inventory) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong kho!" });
        }
        res.json(inventory);
    } catch (error) {
        console.error("L·ªói khi l·∫•y kho h√†ng theo ID:", error);
        res.status(500).json({ error: "L·ªói h·ªá th·ªëng!" });
    }
};

// Th√™m s·∫£n ph·∫©m v√†o kho
exports.addInventory = async (req, res) => {
    try {
        const { productID, product_name, stock_level, restock_date } = req.body;

        if (!productID || !product_name || stock_level === undefined) {
            return res.status(400).json({ error: "Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o!" });
        }

        console.log(`Th√™m s·∫£n ph·∫©m ID ${productID} v√†o kho, s·ªë l∆∞·ª£ng: ${stock_level}`);

        const newInventoryId = await Inventory.add(productID, product_name, stock_level, restock_date);
        res.status(201).json({ message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o kho!", inventoryId: newInventoryId });
    } catch (error) {
        console.error("üî• L·ªói khi th√™m s·∫£n ph·∫©m v√†o kho:", error);
        res.status(400).json({ error: "Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m v√†o kho!", details: error.message });
    }
};


// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho & s·ªë l∆∞·ª£ng ƒë√£ b√°n
exports.updateInventory = async (req, res) => {
    try {
        const { id } = req.params;
        const { added_quantity, restock_date } = req.body;

        if (!added_quantity || isNaN(added_quantity) || added_quantity <= 0) {
            return res.status(400).json({ error: "S·ªë l∆∞·ª£ng nh·∫≠p th√™m ph·∫£i l·ªõn h∆°n 0!" });
        }

        console.log(`C·∫≠p nh·∫≠t kho h√†ng ID ${id}, nh·∫≠p th√™m: ${added_quantity}`);

        const success = await Inventory.update(id, added_quantity, restock_date);
        if (!success) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong kho ƒë·ªÉ c·∫≠p nh·∫≠t!" });
        }

        res.json({ message: "Kho h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!" });
    } catch (error) {
        console.error("üî• L·ªói khi c·∫≠p nh·∫≠t kho h√†ng:", error);
        res.status(500).json({ error: "L·ªói h·ªá th·ªëng!", details: error.message });
    }
};



//  X√≥a s·∫£n ph·∫©m kh·ªèi kho
exports.deleteInventory = async (req, res) => {
    try {
        const { id } = req.params;
        const success = await Inventory.delete(id);

        if (!success) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong kho ƒë·ªÉ x√≥a!" });
        }

        res.json({ message: "S·∫£n ph·∫©m ƒë√£ b·ªã x√≥a kh·ªèi kho!" });
    } catch (error) {
        console.error("L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi kho:", error);
        res.status(500).json({ error: "L·ªói h·ªá th·ªëng!" });
    }
};

// L·∫•y danh s√°ch s·∫£n ph·∫©m c√≥ s·ªë l∆∞·ª£ng t·ªìn kho th·∫•p
exports.getLowStockItems = async (req, res) => {
    try {
        const lowStockItems = await Inventory.getLowStock();
        if (lowStockItems.length === 0) {
            return res.status(204).send(); // Tr·∫£ v·ªÅ kh√¥ng c√≥ n·ªôi dung n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m n√†o t·ªìn kho th·∫•p
        }
        res.json(lowStockItems);
    } catch (error) {
        console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m t·ªìn kho th·∫•p:", error);
        res.status(500).json({ error: "L·ªói h·ªá th·ªëng!" });
    }
};

// C·∫≠p nh·∫≠t kho khi b√°n s·∫£n ph·∫©m (gi·∫£m t·ªìn kho, tƒÉng s·ªë l∆∞·ª£ng ƒë√£ b√°n)
exports.sellProduct = async (req, res) => {
    try {
        const { productID, quantity } = req.body;

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!productID || !quantity) {
            return res.status(400).json({ error: "Thi·∫øu th√¥ng tin s·∫£n ph·∫©m ho·∫∑c s·ªë l∆∞·ª£ng b√°n!" });
        }

        if (isNaN(quantity) || quantity <= 0) {
            return res.status(400).json({ error: "S·ªë l∆∞·ª£ng b√°n ph·∫£i l√† s·ªë l·ªõn h∆°n 0!" });
        }

        // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
        const inventory = await Inventory.getById(productID);
        if (!inventory) {
            return res.status(404).json({ error: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong kho!" });
        }

        // Ki·ªÉm tra s·ªë l∆∞·ª£ng c√≥ ƒë·ªß kh√¥ng
        if (inventory.stock_level < quantity) {
            return res.status(400).json({ error: "S·ªë l∆∞·ª£ng trong kho kh√¥ng ƒë·ªß!" });
        }

        const success = await Inventory.sellProduct(productID, quantity);
        if (!success) {
            return res.status(400).json({ error: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t kho h√†ng. C√≥ th·ªÉ x·∫£y ra l·ªói!" });
        }

        res.json({ message: "Kho h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau khi b√°n s·∫£n ph·∫©m!" });
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t kho h√†ng sau khi b√°n:", error);
        res.status(500).json({ error: "L·ªói h·ªá th·ªëng!" });
    }
};
